\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename xroar.info
@dircategory Emulators
@direntry
* XRoar: (xroar).               Dragon & Tandy CoCo emulator.
@end direntry

@include version.texi

@settitle XRoar Dragon Emulator Manual
@afourpaper
@c @setchapternewpage off
@ifclear VERSION
@set VERSION Unknown
@end ifclear
@c %**end of header

@c @iftex
@c @macro myuref {link, text}
@c @uref{\link\, \text\}@footnote{\link\}
@c @end macro
@c @end iftex

@c @ifnottex
@macro myuref {link, text}
@uref{\link\, \text\}
@end macro
@c @end ifnottex

@copying
This manual is for XRoar (version @value{VERSION}), a Dragon and Tandy 8-bit
computer emulator.

Copyright @copyright{} 2023
Ciaran Anscomb.
@end copying

@titlepage
@title XRoar @value{VERSION}
@subtitle Dragon and Tandy Colour Computer emulator
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@c = === === === === === === === === === === === === === === === === === ===

@c This section DOES appear at the top of HTML output, but DOES NOT appear in
@c the PDF.  Keep specific information here to a minimum.

@node Top
@top About this manual

This manual is for XRoar (version @value{VERSION}), a Dragon and Tandy 8-bit
computer emulator.

XRoar is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

XRoar is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <https://www.gnu.org/licenses/>.

@c = === === === === === === === === === === === === === === === === === ===

@node Getting started, Configuration, Top, Top
@chapter Getting started

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Introduction
@section Introduction

XRoar emulates the Dragon 32/64; Tandy Colour Computers 1, 2 and 3; the Tandy
MC-10; and some other similar machines or clones.  It runs on a wide variety of
platforms.  Emulated hardware includes:

@itemize @bullet
@item Dragon 32, 64, and 200-E; Tandy CoCo 1, 2, & 3; Tandy MC-10; Matra & Hachette Alice 4K.
@item DragonDOS, Delta and RS-DOS disk controller cartridges.
@item Orchestra 90-CC stereo sound cartridge.
@item Games Master Cartridge, including the SN76489 sound chip.
@item Glenside IDE cartridge, with IDE hard disk image support.
@item NX32 and MOOH RAM expansions, with SPI and SD card image support.
@end itemize

Other features include:

@itemize @bullet
@item Raw and translated keyboard modes.
@item Read and write tape images (compact @file{.cas} files or audio, e.g. @file{.wav}).
@item Read and write VDK, JVC and DMK format floppy disk images.
@item Becker port for communication with remote servers.
@item Save and load machine snapshots.
@item GDB target for remote debugging.
@end itemize

XRoar is easily built from source under Linux, and binary packages are provided
for Mac OS X+ and Windows.

XRoar can also be compiled to WebAssembly, and redistributing it in this form
may provide a convenient way for users to run your Dragon software.  See
@myuref{https://www.6809.org.uk/xroar/online/, XRoar Online} for an example.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Recent changes
@section Recent changes

Version 1.4 replaces the @option{-ccr simulated} cross-colour renderer with
more CPU-intensive code that also handles PAL.  The old NTSC-only renderer is
still available using @option{-ccr partial}.  Some video options can be changed
on the fly in a new TV Controls dialog.

Version 1.3 changes the default floppy disk write-back behaviour.  The old
behaviour erred on the side of protecting image files from accidental
modification.  Enough people have complained about this---or at least, the
small number that have complained have done so loudly---that XRoar will now
rewrite changes to the backing file by default.  Run with the
@option{-no-disk-write-back} option to revert to the old behaviour.  XRoar will
still rename the old version of a file to have a @file{.bak} extension if
possible, and also tries harder not to rewrite the file if no writes have
occurred.

Version 1.0 introduced support for the Tandy Colour Computer 3 and the Tandy
MC-10.  Version 1.1 adds proper support for the MC-10's French cousin, the
Matra & Hachette Alice (4K).

Snapshots now store much more state, and of course support the new emulated
machines, but this means the format had to change.  Snapshots from the last 0.x
release are still recognised, and can be loaded, but this support is likely to
be removed in time.

Tape emulation now supports manual pause control.  On the MC-10, this defaults
to paused, as it has no ability to remotely control the tape motor.  You will
need to un-pause after typing @code{CLOAD} or @code{CLOADM} on the MC-10
(@clicksequence{File @click{} Cassette @click{} Play}, or from the tape control
tool; autorunning will do this automatically).

Previously, the Glenside IDE controller would use a fixed HD image file in the
current working directory.  You must now specify an image with the
@option{-load-hd0} option.  You can also now attach a second hard disk image
with @option{-load-hd1}, if you have software that can access it.

Similarly, the NX32 and MOOH cartridges would use a fixed SD image file, and
you must now specify it with the @option{-load-hd0} option.

Old IDE images, including those created by XRoar, will have a @file{.img} file
extension.  In order to distinguish these files from similar images with no
header information, you should now rename these to have a @file{.ide}
extension.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Prerequisites
@section Prerequisites

After installing XRoar (see @ref{Installation}), the first thing to do is make
sure you have the firmware ROM images available for the system you wish to
emulate.  Without these, you will see rubbish on the screen (probably a
checkerboard pattern, reflecting the initial state of RAM, see
@ref{Troubleshooting}).

These firmware images can be transferred from your original machine (with some
effort, outside the scope of this document) or more likely found online on one
of the archive websites.  XRoar searches certain directories for these images,
depending on platform, including (where @samp{~} indicates your ``home
directory''):

@multitable {Unix/Linux} {:~/Local Settings/Application Data/XRoar:~/Application Data/XRoar.}
@headitem Platform @tab ROM path
@item Unix/Linux @tab @file{~/.xroar/roms:@emph{prefix}/share/xroar/roms}
@item Windows @tab @file{:~\AppData\Local\XRoar\roms:~\Documents\XRoar\roms:}@*@file{~\AppData\Roaming\XRoar\roms}
@item Mac OS X+ @tab @file{~/Library/XRoar/roms:@emph{prefix}/share/xroar/roms}
@end multitable

A leading tilde character (@samp{~}) indicates the user's home directory: the
@env{HOME} environment variable on Unix systems, or @env{%USERPROFILE%} on
Windows.  @emph{prefix} is the installation prefix, which is usually
@file{/usr/local}.

Note the empty first path in the Windows default (nothing before the first
@samp{:}) indicates the ``current working directory'' (i.e. you can put
ROM image files into the directory from which you run XRoar).

Under Windows, your ``home directory'' is usually obvious, and represented by
the @env{%USERPROFILE%} environment variable.  The best place to store your ROM
images if you don't want to have to move them around each time you upgrade is
under @file{@env{%USERPROFILE%}\AppData\Local\roms}.  I am informed that
default installs of Windows may move the other directories in the path, but
does not transparently redirect accesses to files within them.

Firmware ROM image files should have a @file{.rom} extension, and be headerless
(so their file size will be an exact power of two bytes).  For most use cases,
you'll need the BASIC ROM image(s) and a disk controller ROM image.  Here are
the expected filenames for the most common images:

@multitable {Tandy Microcolour BASIC (MC-10)} {d200e_26.romXX} {32K (32768 bytes)}
@headitem Firmware ROM @tab Filename @tab File size
@item Dragon 32 BASIC @tab @file{d32.rom} @tab 16K (16384 bytes)
@item Dragon 64 32K BASIC @tab @file{d64_1.rom} @tab 16K
@item Dragon 64 64K BASIC @tab @file{d64_2.rom} @tab 16K
@item DragonDOS @tab @file{ddos10.rom} @tab 8K (8192 bytes)
@item Tandy Colour BASIC @tab @file{bas13.rom} @tab 8K
@item Tandy Extended BASIC @tab @file{extbas11.rom} @tab 8K
@item Tandy Super ECB (CoCo 3) @tab @file{coco3.rom} @tab 32K (32768 bytes)
@item Tandy Super ECB (PAL CoCo 3) @tab @file{coco3p.rom} @tab 32K
@item Tandy RS-DOS @tab @file{disk11.rom} @tab 8K
@item Tandy Microcolour BASIC (MC-10) @tab @file{mc10.rom} @tab 8K
@end multitable

Other machines (in particular the less common Dragon 200-E) will need a
different set of ROM images, and other supported peripherals may also need
their own firmware.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node User-interface introduction
@section User-interface introduction

With the prerequisites satisfied, on running XRoar you should now be presented
with a window showing an emulated machine with a menu bar at the top showing
(at least) @clicksequence{File}, @clicksequence{View}, @clicksequence{Hardware}
and @clicksequence{Tool} menus.  Mac OS X+ users will see the menu bar at the
top of the whole screen instead.  There are often keyboard shortcuts for these,
detailed throughout this manual and listed in @ref{Keyboard shortcuts}.

You can put XRoar into fullscreen mode by selecting @clicksequence{View
@click{} Full Screen}, but you will notice that the menu bar disappears.  To
return to windowed mode, use the keyboard shortcut @kbd{@key{CTRL}+F}, or just
@kbd{@key{F11}}.  You can also toggle the menubar manually by pressing
@kbd{@key{CTRL}+M}.

As you type, you may notice that certain keys don't produce the character you
pressed.  This is because by default, XRoar tries to map keys such that they
closely approximate their locations on the machine being emulated, so
@kbd{minus} on a modern PC keyboard types @kbd{colon} in the emulated machine.
This is good for playing games, where key placement is often important.  Be
aware that some keys don't have useful equivalents on modern keyboards: for
@kbd{CLEAR}, press @kbd{HOME}, or the backtick key; for @kbd{BREAK}, press
@kbd{ESCAPE}.

You can tell XRoar to translate PC keys to emulated keypresses by selecting
@clicksequence{Tool @click{} Keyboard Translation}.  For more about the
keyboard, including mapping keys, see @ref{Keyboard}.

XRoar supports real joysticks, and simulating joysticks with the keyboard or
mouse.  You can select which method is used for each of the emulated joysticks
in the @clicksequence{Hardware @click{} Right Joystick} and
@clicksequence{Hardware @click{} Left Joystick} menus.  The
@clicksequence{Keyboard} option maps the cursor keys to joystick
directions@footnote{While mapped as a joystick, the cursor keys won't work as
actual emulated keys.}, with @key{ALT} and @key{SUPER} mapped to the first and
second firebuttons respectively@footnote{The second firebutton is only useful
on the CoCo 3.}.  The @clicksequence{Mouse} option relates the pointer position
within the window to a joystick's floating position, with the left mouse button
bound being the firebutton.  Much of this can be configured, see
@ref{Joysticks}.

The @clicksequence{Hardware} menu also allows you to select which machine to
emulate, and attach a cartridge to the running machine.  If ROM images were
found for it, you'll probably see that a disk cartridge is already attached.
Swapping cartridges 'live' is not something you'd generally do on a real
machine, and if you change the selection, you may need to select
@clicksequence{Hardware @click{} Hard Reset} to see the effect.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Running programs
@section Running programs

XRoar tries to make running programs easy; after all, it's probably why you
installed an emulator in the first place.  Select @clicksequence{File @click{}
Run} to open a file requester, and select the program media image; in the
majority of cases, and so long as the program is intended for the machine you
have selected, XRoar will ``do the right thing'' to try and start it.

As with much automation, we can't foresee every eventuality, and sometimes
you'll have to launch the program manually.  In this case, you can still simply
attach the image (@emph{without} autorunning it) by selecting
@clicksequence{File @click{} Load}, then follow the programs own instructions.

Here's what XRoar tries to do with various types of media image.  XRoar uses
filename extensions to decide how to handle an image, so be sure to check that
this is correct.

ROM cartridge images typically have a @file{.rom} extension (just like the
firmware ROM images).  XRoar will create and insert a ROM cartridge (it will
appear in the list under @clicksequence{Hardware @click{} Cartridge}) and, if
autorunning, set it up to generate the autostart signalling and hard reset the
emulated machine.

For cassette images (usually a @file{.cas} or @file{.wav}), XRoar will try to
determine the type of the first program in the image, and autorunning will
issue the @samp{CLOAD} or @samp{CLOADM} command accordingly, followed by
@samp{EXEC} or @samp{RUN} as appropriate.  @xref{Cassettes}.

The only standard way of autostarting the program on a disk image is through
its boot sectors, so in this case XRoar will issue the @samp{BOOT} (Dragon) or
@samp{DOS} (Tandy CoCo) command.  These are the most likely to fail as many
disk images do not have boot sectors: read the instructions for yours!  Disk
images can come in many formats, and the file extension is used to
discriminate; the most common are VDK (@file{.vdk} extension) or JVC
(@file{.dsk} extension).  @xref{Floppy disks}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Troubleshooting
@section Troubleshooting

@subsection No BASIC ROM

The most common issue when first using XRoar.  You start the emulator and only
see a checkerboard pattern of orange and inverse @samp{@@} signs (or on the
CoCo 3, some other pattern that's not the usual copyright messages).  This
probably indicates that XRoar could not locate any BASIC ROM images.  Acquire
some and put them in the directory appropriate to your platform.

@float Figure,fig:norom
@image{xroar-screens, 4.15625in,, Emulator with and without BASIC ROM, png}
@caption{Emulator with and without BASIC ROM}
@end float

@c

@subsection Program lacks colour

You remember a program being in colour, but all you see is black and white.

American software is often written to exploit cross-colour artefacts, where
alternating patterns of black and white will ``trick'' the TV into displaying
colour.  XRoar supports this, and should enable it by default when you choose
an NTSC machine.  If you're running an NTSC game on a PAL machine, you can
still force XRoar to render the colours by selecting a cross-colour option from
@clicksequence{View @click{} TV Input}.  There are also options that affect the
fidelity of this rendering.  See @ref{Video output} for more details.

@float Figure,fig:artefacts
@image{xroar-timebandit-af, 6.25in,, @cite{Time Bandit, Dunlevy & Lafnear, 1983} in different cross-colour modes, png}
@caption{@cite{Time Bandit, Dunlevy & Lafnear, 1983} in different cross-colour modes}
@end float

@c

@subsection Can't access HD/SD image

If you've been using previous versions of XRoar with the IDE, MOOH, or NX32
cartridges, you now need to specify the image filename with @option{-load-hd0}.
(HD image for IDE, SD image for NX32, MOOH).

@c

@subsection Debug messages

XRoar prints diagnostic messages to standard output and standard error, and
these may help narrow down a problem.  You can increase their verbosity with
various command-line options.  See @ref{Debugging} for more information.

Windows generally does not show these messages by default. but you can
allocate a console by running XRoar from the command line and including
@option{-C} as the very first option.

@c ===== ======= ======= ======= ======= ======= ======= ======= ======= ===

@node Configuration
@chapter Configuration

XRoar can be configured by placing options into a configuration file,
or by specifying options on the command line.  The file is read first, then
any command line options take precedence.

Many options may be preceded by @samp{no-} to invert their meaning or reset
their value.

To print the current configuration to standard output (suitable for redirection
to a config file), run with @option{-config-print}.  This will include all the
built-in machine and cartridge definitions.  For a complete version including
default values, use @option{-config-print-all}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node The configuration file
@section The configuration file

The configuration file is called @file{xroar.conf}.  Good default locations for
@file{xroar.conf} are listed in @ref{Installation}, but it is actually searched
for in a list of directories.  You can override this search path with the
@env{XROAR_CONF_PATH} environment variable, which contains a colon-separated
(@samp{:}) list of directories.  Here are the defaults:

@multitable {Mac OS X+.} {:~/Local Settings/Application Data/XRoar:~/Application Data/XRoar.}
@headitem Platform @tab Default @env{XROAR_CONF_PATH}
@item Unix/Linux @tab @file{~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar}
@item Windows @tab @file{:~\Documents\XRoar:~\AppData\Local\XRoar:~\AppData\Roaming\XRoar}
@item Mac OS X+ @tab @file{~/Library/XRoar:~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar}
@end multitable

A leading tilde character (@samp{~}) indicates the user's home directory: the
@env{HOME} environment variable on Unix systems, or @env{%USERPROFILE%} on
Windows.  @emph{prefix} is the installation prefix, which is usually
@file{/usr/local}.

Note the empty first path in the Windows default (nothing before the first
@samp{:}) indicates the ``current working directory'' (i.e. you can put
@file{xroar.conf} into the directory from which you run XRoar).

Under Windows, your ``home directory'' is usually obvious, and represented by
the @env{%USERPROFILE%} environment variable.  The best place to store your
configuration file if you don't want to have to move it around each time you
upgrade is as @file{@env{%USERPROFILE%}\AppData\Local\xroar.conf}.  I am
informed that default installs of Windows may move the other directories in the
path, but does not transparently redirect accesses to files within them.

To bypass the search path and start XRoar using a specific configuration file,
pass @option{-c @var{file}} as the very first option to XRoar.

Directives are listed in @file{xroar.conf} one per line.  They contain an
option, possibly followed by whitespace and a value.  Trailing whitespace is
ignored.  Empty lines are skipped, and any line where the first non-whitespace
character is a hash (@samp{#}) is treated as a comment.  Options do not
need their leading dash (@samp{-}) in the configuration file.

If a value contains special characters, or if you want trailing whitespace to
be included in the value, you must @emph{escape} those characters.  Sections
contained within pairs of single or double quotes are escaped, except the
backslash (@samp{\}) which introduces an escape sequence:

@multitable @columnfractions .13 .83
@headitem Sequence @tab Description
@item @samp{\0} @tab Null (NUL), ASCII 0.  Note that this is only permitted when
@emph{not} followed by another octal digit, as it may be confused with an octal
byte, so it may be preferable to use @samp{\x00} instead.
@item @samp{\a} @tab Bell (BEL), ASCII 7, no equivalent on the Dragon keyboard.
@item @samp{\b} @tab Backspace (BS), ASCII 8, @kbd{LEFT}.
@item @samp{\e} @tab Escape (ESC), ASCII 27, no equivalent on the Dragon
keyboard, but either mapped to @kbd{BREAK} or used to introduce limited ANSI
escape sequences in the @option{-type} command, effective for the MC-10.
@item @samp{\f} @tab Form Feed (FF), ASCII 12, @kbd{CLEAR}.
@item @samp{\n} @tab Newline (NL), ASCII 10, @kbd{DOWN}.  Not usually used by the
Dragon as a line ending, instead try @samp{\r}.
@item @samp{\r} @tab Carriage Return (CR), ASCII 13, @kbd{ENTER}.
@item @samp{\t} @tab Horizontal Tab (HT), ASCII 9, @kbd{RIGHT}.
@item @samp{\v} @tab Vertical Tab (VT), ASCII 11, no equivalent on the Dragon keyboard.
@item @samp{\@emph{nnn}} @tab 8-bit byte with value specified as a three-digit octal
number, @emph{nnn}.
@item @samp{\x@emph{hh}} @tab 8-bit byte with value specified as a two-digit
hexadecimal number, @emph{hh}.
@item @samp{\u@emph{hhhh}} @tab 16-bit Unicode codepoint specified as a four-digit
hexadecimal number, @emph{hhhh}.  Internally, this will be encoded as UTF-8.
@end multitable

Any other character following a backslash---including another backslash---is
included verbatim.  For example, this will be necessary in the configuration
file under Windows when file paths include the backslash as a directory
separator.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Command line options
@section Command line options

On the command line, it is assumed that your shell will handle argument
quoting, so any quote characters will be included verbatim.  Escape sequences
are still parsed, except when an option expects a filename, as shells often use
their own escaping mechanisms when autocompleting filename arguments.

@c = === === === === === === === === === === === === === === === === === ===

@node Machines
@chapter Machines

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Machine profiles
@section Machine profiles

XRoar creates a list of machine profiles from built-in and user-supplied
configuration.  One of these profiles is selected at startup, using either the
@option{-default-machine @var{name}} option, or by XRoar testing each profile
in turn to see if its configured ROM image files are available.

Each machine profile has a base architecture (specified with the
@option{-machine-arch} option).  See @ref{Machines} for details of the
supported architectures, and which machine profiles are built-in.

@multitable @columnfractions .30 .66
@item @option{-default-machine @var{name}}
@tab Default machine profile to select on startup.
@item @option{-m @var{name}},@*@option{-machine @var{name}}
@tab Create or modify named machine profile.  The remaining options configure the profile.  @option{-machine help} lists currently defined profiles.
@item @ @ @ @option{-machine-desc @var{text}}
@tab Description shown in @option{-machine help} and menu options.
@item @ @ @ @option{-machine-arch @var{arch}}
@tab Base machine architecture.  See @ref{Machines} for a list.  @samp{dragon32, dragon64, coco, coco3} or @samp{mc10}.
@item @ @ @ @option{-machine-keyboard @var{type}}
@tab Override the type of keyboard attached to machine.  @samp{dragon, dragon200e, coco} or @samp{coco3}.
@item @ @ @ @option{-machine-cpu @var{cpu}}
@tab Fitted CPU.  One of @samp{6809} or @samp{6309}.  Not applicable to the MC-10.
@item @ @ @ @option{-bas @var{rom}}
@tab ROM image for Colour BASIC (CoCo) or Microcolour BASIC (MC-10, Alice).
@item @ @ @ @option{-extbas @var{rom}}
@tab ROM image for Extended BASIC (Super Extended BASIC on the CoCo@w{ }3).
@item @ @ @ @option{-altbas @var{rom}}
@tab ROM image for 64K-mode Extended BASIC (Dragon 64, Dragon 200-E).
@item @ @ @ @option{-no-bas},@*@ @ @ @option{-no-extbas},@*@ @ @ @option{-no-altbas}
@tab Indicate the corresponding ROM is not fitted in this machine.
@item @ @ @ @option{-ext-charset @var{rom}}
@tab ROM image to use for external character generator.
@item @ @ @ @option{-tv-type @var{type}}
@tab One of @samp{pal}, @samp{ntsc} or @samp{pal-m}.
@item @ @ @ @option{-tv-input @var{input}}
@tab One of @samp{cmp} (composite video, no cross-colour), @samp{cmp-br} (composite video, blue-red cross-colour), @samp{cmp-rb} (composite video, red-blue cross-colour) or @samp{rgb} (RGB video, CoCo 3 only).
@item @ @ @ @option{-vdg-type @var{type}}
@tab Indicate the VDG variant fitted.  One of @samp{6847} or @samp{6847t1}.
@item @ @ @ @option{-ram @var{kbytes}}
@tab Amount of RAM fitted in kilobytes.  Valid sizes are 4K, 8K, 16K, 32K or 64K for Dragon and Tandy CoCo 1/2; 128K, 512K, 1024K or 2048K for the Tandy CoCo 3; 2K, 4K or 20K for the Tandy MC-10 and Alice.
@item @ @ @ @option{-machine-cart @var{name}}
@tab Default cartridge to attach.
@item @ @ @ @option{-no-machine-cart}
@tab Indicate that XRoar is not to automatically attempt to attach a DOS cartridge
to this machine (the default is to try).
@item @ @ @ @option{-machine-opt @var{string}}
@tab Set machine arch-specific option.
@end multitable

For example, if the following lines were placed in your @file{xroar.conf}, a
new machine could be selected with @option{-m pippin}:

@example
machine pippin
  machine-desc "Dragon Pippin (prototype)"
  machine-arch dragon32
  ram 16
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Machine architectures
@section Machine architectures

XRoar supports several underlying machine architectures, and has one or more
built-in machine profile configurations based on each one.  See @ref{Machine
profiles} for more information on modifying or creating profiles.  The rest of
this section describes the available architectures.

@c

@node Dragon 32
@subsection Dragon 32

Released in 1982, the Dragon 32 closely follows Motorola's reference design for
the MC6809 CPU, MC6883 Synchronous Address Multiplexer and the MC6847 Video
Display Generator.  Dragon Data also chose to make it electrically compatible
with some of Tandy's peripherals for their Colour Computer; notably the
joystick and cartridge ports.  In addition, it has a parallel port, making it
compatible with the majority of printers on the market at the time.

Architecture @samp{dragon32}.  Built-in machine profile @samp{dragon32}.

@c

@node Dragon 64
@subsection Dragon 64

The Dragon 64 was released the next year, in 1983.  In upped the on-board RAM
to 64K and provided a reassembled version of Microsoft BASIC to make use of it.
It also added a serial port, though that is not yet emulated by XRoar.

There are a few more changes to the motherboard than just extra RAM, so XRoar
treats this as a separate architecture.

Architecture @samp{dragon64}. Built-in machine profiles: @samp{dragon64},
@samp{tano} (American NTSC version of Dragon 64 by Tano), @samp{dragon200e}
(localised Spanish Dragon 64 from Eurohard).

@c

@node Tandy Colour Computer 1/2
@subsection Tandy Colour Computer 1/2

An earlier (1980) Tandy machine made using Motorola's reference design,
primarily marketed in the USA.  Sold at many price points, with 4K
(originally), 16K, 32K or 64K of RAM and either with or without Extended Colour
BASIC.  Later versions come with a new version of the VDG, the MC6847T1, which
includes true lowercase characters.

Architecture @samp{coco}.  Built-in machine profiles: @samp{coco},
@samp{cocous} (NTSC), @samp{coco2b} (T1), @samp{coco2bus} (NTSC, T1),
@samp{mx1600} (Mexican clone by Dynacom).

@c

@node Tandy MC-10
@subsection Tandy MC-10

Released in 1983, a little too late to compete with the Sinclair ZX-81, it was
discontinued a year later.  A cut-down machine based on the Motorola MC6803,
but still using the MC6847 VDG and containing a version of Microsoft BASIC.
Comes with 4K of RAM, but much of the small amount of software available for it
assumes an additional 16K RAM pack.

Architecture @samp{mc10}.  Built-in machine profile @samp{mc10}.

@c

@node Matra & Hachette Alice
@subsection Matra & Hachette Alice

Basically the same machine as an MC-10, but with a French keyboard, 50Hz
display and a nice bright red case.  Unlike the MC-10, the Alice line actually
continued, with the Alice 32 and Alice 90, though these are not supported by
XRoar, as their architectures differ significantly.

Architecture @samp{mc10}.  Built-in machine profile @samp{alice}.

@c

@node Tandy Colour Computer 3
@subsection Tandy Colour Computer 3

In 1986, Tandy released the Colour Computer 3.  They had developed a custom
chip, the TCC1014 (@emph{GIME}), with VLSI to replace the SAM and VDG, and it
supported extended graphics modes, more memory (up to 512K directly) and a
timer function, along with somewhat better interrupt handling and the ability
to run at twice the clock speed.  A major development, it maintained a high
degree of compatibility with its predecessors, losing some lesser-used (in the
USA) graphics modes.

The CoCo 3 generates different colours depending on whether you use the
Composite Video or RGB outputs.  The NTSC version defaults to assuming
Composite Video, while the PAL version always uses the RGB output from the
GIME.

If you specify 1024K or 2048K RAM, this enables an optional DAT board function
that extends the range of the MMU registers by two bits.  For compatibility
with early 2M board, these two bits are write-only.

Architecture @samp{coco3}.  Built-in machine profiles: @samp{coco3} (NTSC),
@samp{coco3p} (PAL).

@c = === === === === === === === === === === === === === === === === === ===

@node Cartridges
@chapter Cartridges

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Cartridge profiles
@section Cartridge profiles

Similarly, XRoar contains a list of cartridge profiles, each with an underlying
type.

@multitable @columnfractions .27 .69
@item @option{-cart @var{name}}
@tab Create or modify named cartridge profile.  @option{-cart help} lists currently defined profiles.  The remaining options configure the profile.
@item @ @ @ @option{-cart-desc @var{text}}
@tab Cartridge description shown in @option{-cart help} and menu options.
@item @ @ @ @option{-cart-arch @var{arch}}
@tab Cartridge architecture.  See @ref{Cartridge types} for a list.
@item @ @ @ @option{-cart-rom @var{file}}
@tab The ROM image specified will be mapped from $C000.
@item @ @ @ @option{-cart-rom2 @var{file}}
@tab The ROM image specified will be mapped from $E000.
@item @ @ @ @option{-cart-becker}
@tab Enable Becker port where supported.
@item @ @ @ @option{-cart-autorun}
@tab Auto-start cartridge using FIRQ.
@item @ @ @ @option{-cart-opt @var{string}}
@tab Set cartridge type-specific option.
@end multitable

There are no cartridges usable with the MC-10/Alice yet (the 16K expansion is
technically a cartridge, but XRoar currently emulates that as though it were
on-board).

Built-in cartridge profiles exist with sensible defaults for each of the
cartridge types except @samp{rom} (for which a profile is simply created when
you try to autorun a ROM image), each with the same name as the type.

Defining new cartridge profiles is most usefully done in the configuration
file, for example:

@example
cart mydos
  cart-desc "SuperDOS E6"
  cart-arch dragondos
  cart-rom sdose6.rom
  cart-rom2 dosdream.rom
@end example

This will define a cartridge called @samp{mydos} as a DragonDOS cartridge with
its ROM replaced with @file{sdose6.rom}, and an additional ROM called
@file{dosdream.rom} (DOS Dream is a very useful ROM-based
editor/assembler/deugger that coexists with DragonDOS).

XRoar will automatically attempt to find a disk interface relevant to the
current machine unless a specific default has been configured for the machine
with @option{-machine-cart}, or automatic selection is disabled with the
@option{-no-machine-cart} option.

Selecting a ROM image file with the @option{-load} or @option{-run} command
line options, or with @kbd{@key{CTRL}+L} or
@kbd{@key{CTRL}+@key{SHIFT}+L}, will attach a ROM cartridge.

Within the emulator, cartridges can be enabled or disabled by pressing
@kbd{@key{CTRL}+E}.  You will almost certainly want to follow this with a
hard reset (@kbd{@key{CTRL}+@key{SHIFT}+R}).

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Cartridge types
@section Cartridge types

XRoar supports several types of cartridge, and has at least one built-in
cartridge profile configurations for each one.  See @ref{Cartridge profiles}
for more information on modifying or creating profiles.  The rest of this
section describes the available types.

@c

@node DragonDOS
@subsection DragonDOS

The official Dragon Data disk system for the Dragon.  Supports 80 track, double
sided, double-density floppy disks.

Emulation supports the Becker port mapped to $FF49/$FF4A, if enabled.

Type @samp{dragondos}.  Built-in cartridge profile @samp{dragondos}.

@c

@node Delta
@subsection Delta

Premier Microsystems' alternative Dragon disk system.  Apparently two versions
of this may have existed; XRoar emulates the double-density version.

Type @samp{delta}.  Built-in cartridge profile @samp{delta}.

@c

@node RS-DOS
@subsection RS-DOS

Tandy's disk interface for the CoCo.  Typically supports only 35-track
single-sided double-density disks, though more is accessible using OS-9.

Emulation supports the Becker port.

Type @samp{rsdos}.  Built-in cartridge profile @samp{rsdos}, @samp{becker}
(with Becker port enabled, expecting @file{hdbdw3bck.rom}).

@c

@node Glenside IDE controller
@subsection Glenside IDE controller

Interfaces the Tandy CoCo to up to two IDE hard disks.  Its IO is generally
memory mapped to addresses $FF50--$FF58.  Also optionally supports the  Becker
port.

To set the base address to some other value (the original cartridge can jumper
IO to be from $FF70--, but this is incompatible with the MPI), use the
@option{-cart-opt ide-addr=@var{addr}}.

The controller supports up to two drives, and you can specify the image to use
in each with @option{-load-hd0 @var{file}} or @option{-load-hd1
@var{file}}.  If @var{file} does not exist, a 256MB empty image is
created when the controller first tries to access it.

Sectors are 512 bytes, and while some software may use all 512, others only
access 256 bytes per sector, padding the other 256 bytes (or simply doubling
them up).

Type @samp{ide}.  Built-in cartridge profile @samp{ide}.

@c

@node NX32 and MOOH cartridges
@subsection NX32 and MOOH cartridges

Two memory expansion cartridges created by Tormod Volden for the Dragon.  Both
accept an SD card image.

The earlier NX32 provides simple bank switching, while the MOOH provides
extensive MMU functionality very like that in the Tandy CoCo 3.

Types @samp{nx32}, @samp{mooh}.  Built-in cartridge profiles: @samp{nx32},
@samp{mooh}.  Both require fleshing out with ROM information, and an SD card
image specified, e.g.:

@example
cart mooh
  cart-rom sdbdos-eprom8-all-v1.rom

load-hd0 "~/xroar/sdcard.img"
@end example

@c

@node Games Master Cartridge
@subsection Games Master Cartridge

The Games Master Cartridge (@samp{gmc}), created by John Linville, provides the
ability to bank switch up to 64K of cartridge ROM, along with an on-board
SN76489 sound chip.

This cartridge type is selected automatically (and configured to autostart) if
you autorun a ROM image larger than 16K.

Type @samp{gmc}.  Built-in cartridge profile @samp{gmc} is configured with no
ROM installed, and to not auto-start.

@c

@node Orchestra 90-CC sound cartridge
@subsection Orchestra 90-CC sound cartridge

A simple expansion that provides two 8-bit DACs for stereo sound (but still
driven by the CPU).  An on-board ROM for the CoCo provides an interface to
composition, but if autorun is disabled, the hardware itself works fine on the
Dragon.

Type @samp{orch90}.  Built-in cartridge profile @samp{orch90}.

@c

@node Multi-Pak Interface
@subsection Multi-Pak Interface

The Multi-Pak Interface (@samp{mpi}) is a CoCo add-on by Tandy that allows up
to four cartridges to be connected, selectable by software or hardware switch.

The RACE Computer Expansion Cage is a Dragon add-on by RACE similar to the MPI.
Addressing and behaviour differs.

If you attach either Multi-Pak Interface (MPI), you'll want to populate one or
more of its slots (numbered 0-3).  Use @option{-mpi-load-cart
[@var{slot}=]@var{name}} to attach a named cartridge to the specified (or
next) slot.  Configure the initially selected slot with @option{-mpi-slot
@var{slot}}.

It's not recommended to load more than one DOS cartridge into the MPI.
As things stand, only the last one (in slot order) will have the emulated
drives properly connected.

Types @samp{mpi}, @samp{mpi-race}.  Built-in cartridge profiles: @samp{mpi},
@samp{mpi-race} (RACE variant).

@example
machine coco
  machine-cart mpi

cart mpi
  mpi-load-cart 0=orch90
  mpi-load-cart 3=rsdos
  mpi-slot 3
@end example

@c

@c @node MC-10 16K RAM cartridge
@c @subsection MC-10 16K RAM cartridge

@c

@node Becker port
@subsection Becker port

Not a cartridge in and of itself, XRoar supports an emulator-only feature that
enables it to connect to a server using a TCP connection and access remote
facilities such as disk images and MIDI devices---the @dfn{Becker port}.  This
appears as a memory-mapped device, and XRoar supports it as an optional feature
of many cartridge types.

Enable this port when configuring a cartridge with @option{-cart-becker}.  The
@option{-becker} option tells XRoar to prefer a cartridge with it enabled when
automatically selecting one.

The IP and port to connect to can be specified with the @option{-becker-ip} and
@option{-becker-port} options.  These default to @samp{127.0.0.1} and
@samp{65504} respectively, matching the defaults for pyDriveWire and
DriveWire@w{ }4.

@c = === === === === === === === === === === === === === === === === === ===

@node Storage media
@chapter Storage media

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Cassettes
@section Cassettes

Cassette tape was the primary method of loading software until floppy disk
drives became available, and remains popular for games distribution even since,
as it serves the largest market.  Data is encoded onto cassette tape as audio,
all currently-emulated machines using the same format, where a single cycle
represents one bit of data, and its wavelength determines the bit's value.

The Dragon and Tandy Colour Computers have a built-in cassette relay that can
control the cassette motor remotely, but the MC-10 does not.  After you type
the appropriate load command on an MC-10, you will have to manually start the
player.

XRoar supports tapes as raw sampled audio in WAV format (@file{.wav}), or in
the more compact CAS format (@file{.cas}) which represents bits of data
directly (files for the MC-10 are typically still CAS format, but with a
@file{.c10} extension; these will also work).

An extension to the CAS format called CUE is also supported.  This comprises
extra data at the end of the file that @emph{marks up} the CAS file to indicate
portions of silence, or the wavelength used for each bit.  This enables it to
better represent the structure of the original tape, support certain fast
loaders, yet for data within the file to remain readable with a hex editor if
it is correctly aligned.

Some MC-10/Alice software has been seen in K7 format (@file{.k7}).  XRoar has
read-only support for these files.

XRoar can also attach BASIC ASCII text files (with @file{.bas} or @file{.asc}
file extensions) and interpret them as cassettes, providing a useful way to
edit these in your favourite text editor before loading into the emulator.
Note: this feature is not supported by the MC-10.

The tape used for writing is considered separate to the read tape (this is an
emulator-friendly approach to prevent overwriting your programs, though it
is possible with two cassette decks).

Under Mac OS X+, the @clicksequence{File @click{} Cassette} menu contains
controls to insert or rewind the input and output tapes, play/pause and toggle
options.

In the Unix/Linux GTK+ and Windows interfaces, these options are available from
the tape control dialog, which you can open with @clicksequence{Tool @click{}
Tape control} or by pressing @kbd{@key{CTRL}+T}.  This dialog will also show
you the programs found on a cassette and allow you to double click them to seek
to the appropriate position.

@multitable @columnfractions .32 .64
@item @option{-load-tape @var{file}}
@tab Attach @var{file} as tape image for reading.
@item @option{-tape-write @var{file}}
@tab Open @var{file} for tape writing.
@item @option{-tape-pan @var{position}}
@tab Pan stereo input.  Floating point number from @samp{0.0} (full left) to @samp{1.0} (full right).  The default of @samp{0.5} mixes the two channels equally.
@item @option{-tape-hysteresis @var{pc}}
@tab Read hysteresis as percentage of full scale (default is 1%).
@item @option{-no-tape-fast}
@tab Disable fast tape loading.  The default is enabled, which uses ROM intercepts to speed up loading.
@item @option{-no-tape-pad-auto}
@tab Disable automatic padding of short leaders in CAS files (see below).
@item @option{-tape-ao-rate @var{hz}}
@tab Set tape writing frame rate to @var{hz} (affects audio file output, e.g.  WAV).  Default: @samp{9600}Hz.
@item @option{-tape-rewrite}
@tab Enable tape rewriting (see below).
@item @option{-tape-rewrite-gap-ms @var{ms}}
@tab Gap length in milliseconds to write in rewrite mode (1-5000ms, default 500ms).
@item @option{-tape-rewrite-leader @var{n}}
@tab Length of leaders in bytes to write in rewrite mode (1-2048 bytes, default 256).
@item @option{-snap-motoroff @var{file}}
@tab Write a snapshot to @var{file} each time the cassette motor is switched off.
@end multitable

@emph{Tape padding} defaults to on, may be useful to disable with
@option{-no-tape-pad-auto} if you are having trouble loading.  A lot of old CAS
tape images were created with their leaders truncated.  This worked fine in
emulators that fully intercepted the ROM to load them, but causes issues when
converted to audio to play out to a real machine.

Tape rewriting, enabled with @option{-tape-rewrite} is a special mode where
the ROM is intercepted, and anything read from the input tape is
@emph{rewritten} to the output tape.  Custom loaders may defeat it, but
otherwise this is a good way of creating a well-formed CAS file, with bytes
aligned and consistent leader lengths.

The @option{-snap-motoroff @var{file}} option is useful for getting a dump
of the machine state at the moment a program has finished loading, but before
it has started executing.  If you specify @var{file} with a @file{.ram}
extension, you can get a simple RAM dump, viewable in a hex editor.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Floppy disks
@section Floppy disks

Floppy disk drives provide much faster access to data than cassette tape.
Initially costly, prices did fall somewhat, so these became a fairly common
expansion.

If a disk interface cartridge is selected, XRoar supports virtual disks.  Three
virtual disk formats are supported:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item .dmk
@tab Disk image file in a format defined by David Keil.  These images store a lot of information about the structure of a disk and support both single and double density data.
@item .jvc, .os9, .dsk
@tab Disk image file in a basic sector-by-sector format with optional header information.
@item .vdk
@tab Another disk image file format, used by PC-Dragon.
@end multitable

Under Mac OS X+, the @clicksequence{File @click{} Drive @var{X}} menus allow
you to insert or eject disks, create new disks, or toggle the write-enable and
write-back options.

In the Unix/Linux GTK+ and Windows interfaces, these options are available from
the drive control dialog, which you can open with @clicksequence{Tool @click{}
Drive control} or by pressing @kbd{@key{CTRL}+D}.

Note that RS-DOS for the Tandy Colour Computer numbers its drives from zero
instead of one, so when you perform operations on Drive 1, from the CoCo's
point of view, that will be Drive 0.

@multitable @columnfractions .26 .70
@item @option{-load-fd@var{X} @var{file}}
@tab Load disk image file @var{file} into drive @var{X} (0--3).
@item @option{-no-disk-write-back}
@tab Don't default to enabling write-back for disk images.
@item @option{-no-disk-auto-os9}
@tab Don't try to detect headerless OS-9 JVC disk images.
@item @option{-no-disk-auto-sd}
@tab Don't assume single density for 10 sector-per-track disks.
@end multitable

When you attach a disk, it is read into memory, and subsequent disk operations
are performed on this in-memory copy.  Write-enable defaults to on (write
operations on the in-memory copy will work).  Write-back also defaults to on,
so changes to the copy will be rewritten to the image file.  @emph{Warning}:
This is a change in behaviour in new versions of XRoar.  If you wish to protect
your floppy image files from accidental modification, run with the
@option{-no-disk-write-back} option.

Even with write-back enabled, disk images are not usually rewritten until they
are ejected, changed, or you quit the emulator.  However, you can force
rewriting the image files at any time by pressing
@kbd{@key{CTRL}+@key{SHIFT}+D}.

If a floppy image file is rewritten, XRoar will rename the old version to have
a @file{.bak} extension if possible.

The JVC format specifies that the disk images without headers are single-sided,
but some double-sided disk images have been made available without headers.
These cannot normally be distinguished from a single-sided disk that happens to
have twice the number of tracks.  If an OS-9 filesystem is present, the
identification sector is inspected to determine the correct disk structure.
This step will always be performed for headerless images with the @file{.os9}
filename extension, but may be disabled for the other valid JVC filename
extensions with @option{-no-disk-auto-os9}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Hard disks
@section Hard disks

The Glenside IDE controller interfaces hard disks to the Tandy CoCo, and the
MOOH and NX32 memory expansions can each provide access to an SD card.  XRoar
supports these types of hard disk image:

IDE images with header information should have a @file{.ide} extension.  This
is necessary to distinguish them from images with no header.  These images
contain metadata describing an IDE drive, and are the only ones usable in CHS
mode.  Starting with 512 bytes of ``magic'' and 512 bytes of IDENTIFY DEVICE
information, sector data follows in LSN order, 512 bytes per sector.

Raw images with 512 byte sectors should have a @file{.img} extension.  Previous
versions of XRoar would create IDE images with this file extension, and you
should rename them to @file{.ide}.  Unfortunately this is necessary to support
raw images without a header: if you happened to write the ``magic'' identifying
information to the start of it, any attempt to be clever about file contents
would fail.

Finally, files with the @file{.vhd} extension are assumed to be 256
bytes per sector with no header information.

When no IDE metadata is present, XRoar will fake some up so that raw images can
still be used with the IDE controller emulation.  This means VHD images
containing RSDOS filesystems are usable with YA-DOS or HDBDOS.

@multitable @columnfractions .21 .75
@item @option{-load-hd@var{X} @var{file}}
@tab Use @var{file} as the hard disk image for drive @var{X} (0 or 1).
@end multitable

@c = === === === === === === === === === === === === === === === === === ===

@node Peripherals
@chapter Peripherals

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Keyboard
@section Keyboard

@multitable @columnfractions .33 .63
@item @option{-keymap @var{code}}
@tab Specify host keyboard layout.  @option{-keymap help} for a list.  Default: @samp{uk}
@item @option{-kbd-bind @var{hkey}=[pre:]@var{dkey}}
@tab Bind host key @var{hkey} to emulated key @var{dkey}.
@item @option{-kbd-translate}
@tab Start up in translated keyboard mode.
@item @option{-type @var{string}}
@tab Intercept ROM calls to type @var{string} into BASIC on startup.
@end multitable

The default mapping of host keys to emulated keys is based on the original
@emph{positions} of the keys, with certain exceptions: cursor keys are mapped
directly, @key{Escape} maps to the Dragon's @key{BREAK} key, and @key{Home}
maps to @key{CLEAR}.  Other keys may also be mapped to @key{CLEAR} if there is
a choice in your selected keymap that doesn't conflict with a regular character
in translated mode.

When binding keys with @option{-kbd-bind}, if the emulated key @var{dkey} is
prefixed with @samp{preempt:} or @samp{pre:}, this binding preempts
translation; useful for modifier keys.  Interpretation of @var{hkey} depends on
which user-interface toolkit is in use, and it might be useful to run with
@option{-debug-ui 1} to see what the toolkit calls your host keys.

Special values for @var{dkey} are: @samp{colon}, @samp{semicolon},
@samp{comma}, @samp{minus}, @samp{fullstop}, @samp{period}, @samp{dot},
@samp{slash}, @samp{at}, @samp{up}, @samp{down}, @samp{left}, @samp{right},
@samp{space}, @samp{enter}, @samp{clear}, @samp{break}, @samp{escape},
@samp{shift}, @samp{alt}, @samp{ctrl}, @samp{control}, @samp{f1}, @samp{f2}.

For position-based mapping (untranslated), XRoar needs to be informed of the
layout of the host's keyboard.  If it is not the default (UK), use the
@option{-keymap @var{code}} option.  This is basically the equivalent of a
pre-rolled list of @option{-kbd-bind} options.

XRoar can also be put into @emph{translated} keyboard mode, where characters
typed on a PC keyboard are translated into the equivalent keystrokes on the
Dragon.  Use the @option{-kbd-translate} option to default to this mode.  Press
@kbd{@key{CTRL}+Z} at any time to toggle between the two modes.

In translated mode, @key{SHIFT}+@kbd{Return} is mapped to the Caps Lock
combination (@key{SHIFT}+@kbd{0} usually, @key{SHIFT}+@kbd{ENTER} on the Dragon
200-E).  Similarly, @key{SHIFT}+@kbd{Space} is mapped to the
@emph{pause output} combination (@key{SHIFT}+@kbd{@@} usually,
@key{SHIFT}+@kbd{Space} on the Dragon 200-E).

The keyboards of the Dragon and Tandy CoCo operate in the same way, but the
matrix and/or key layouts differ.  When you select a machine, the appropriate
layout is selected for you, but you can toggle between them by pressing
@kbd{@key{CTRL}+K}, which can sometimes be useful when running software
designed for the other machine.

XRoar will simulate the @emph{ghosting} effects inherent in a simple matrix
design, but the accuracy of this simulation will depend very much on your host
keyboard, which vary greatly in the amount of simultaneous keypresses they
support (for more information, search for ``NKRO'').

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Joysticks
@section Joysticks

Analogue joysticks are very common peripherals for the Dragon and Tandy CoCo.
Many games require them, and some productivity applications even use them as a
mouse-like input device.  Joysticks are electrically compatible between the
machines, though some CoCo joysticks use a 6-pin DIN connector instead of 5-pin
DIN, and these will not plug into the Dragon.  On the CoCo 3, this extra pin
can carry the signal for an extra firebutton.

XRoar can simulate these analogue joysticks using a variety of input methods.
There are a few built-in joystick configuration profiles, or new ones can be
defined.  Here are the built-ins:

@multitable {kjoy0xxx} {First two axes and first two buttons of second physical joystickxxx}
@headitem Name @tab Description
@item @samp{joy0} @tab First two axes and first two buttons of first physical joystick
@item @samp{joy1} @tab First two axes and first two buttons of second physical joystick
@item @samp{kjoy0} @tab Keyboard based virtual joystick using cursor keys and @key{Left Alt}.
@item @samp{mjoy0} @tab Mouse based virtual joystick mapped to screen position
@end multitable

If present, @samp{joy0} maps to the Dragon's right joystick port, and
@samp{joy1} to the left joystick port.  You can specify different profiles to
map with @option{-joy-right @var{name}} or @option{-joy-left @var{name}}.
Select which joystick is mapped to each port at any time with the
@clicksequence{Hardware @click{} Right joystick} or @clicksequence{Hardware
@click{} Left joystick} menus.  You can also swap the left and right joystick
mappings by just pressing @kbd{@key{CTRL}+@key{SHIFT}+J}.

They keyboard-based virtual joystick can be quickly cycled through the ports by
pressing @kbd{@key{CTRL}+J}.  The first press will map it to the right
joystick, the second to the left joystick instead, and pressing a third time
unmaps it.  You can change which virtual joystick is cycled in this way with
the @option{-joy-virtual @var{name}} option.

The MC-10 has no built-in joystick ports, but an expansion (that can not be
used at the same time as the 16K RAM expansion!) allows the connection of
digital joysticks.  These are not yet supported by XRoar.

@multitable @columnfractions .37 .59
@item @option{-joy @var{name}}
@tab Create or modify named joystick profile.  @option{-joy help} lists currently defined profiles.
@item @ @ @ @option{-joy-desc @var{text}}
@tab Joysticks description shown in @option{-joy help}.  @c and menu options.
@item @ @ @ @option{-joy-axis @var{axis}=@var{input}:[@var{args}]}
@tab Configure joystick axis.  @option{-joy-axis help} to list physical joysticks.
@item @ @ @ @option{-joy-button @var{btn}=@var{input}:[@var{args}]}
@tab Configure joystick button.  @option{-joy-button help} to list physical joysticks.
@item @option{-joy-right @var{name}}
@tab Map right joystick.
@item @option{-joy-left @var{name}}
@tab Map left joystick.
@item @option{-joy-virtual @var{name}}
@tab Specify the @emph{virtual} joystick to cycle.  Default: @samp{kjoy0}
@end multitable

The axis and button mapping options used while configuring a profile need some
explaining.

Configure axes with @option{-joy-axis @var{axis}=@var{input}:[@var{args}]}.
The @var{axis} is either @samp{X} or @samp{Y} (or numbered 0--1).

Configure buttons with
@option{-joy-button @var{button}=@var{input}:[@var{args}]}.  The @var{button}
is either 0 (first button), or 1 (second button---only useful on the CoCo 3).

In both cases, the @var{input} selects a source for the input from the list
below, and the @var{args} specify which one to use.

@multitable {physicalxxx} {screen-offset0,screen-offset1xxx} {joystick-index,button-indexxxx}
@headitem Input @tab Axis args @tab Button args
@item @samp{physical} @tab @var{joystick-index},@var{[-]axis-index} @tab @var{joystick-index},@var{button-index}
@item @samp{keyboard} @tab @var{key-name0},@var{key-name1} @tab @var{key-name}
@item @samp{mouse} @tab @var{screen-offset0},@var{screen-offset1} @tab @var{button-number}
@end multitable

The @samp{-} before the axis index when configuring a physical joystick will
invert that axis.  Key names for the keyboard module depend on the underlying
toolkit.  The default screen offsets for the mouse module are @samp{X=2,254}
and @samp{Y=1.5,190.5} which gives reasonable behaviour for some games and
utilities.

To list the physical joysticks seen by XRoar, with the index numbers to use in
the options above, specify either @option{-joy-axis help} or
@option{-joy-button help}.

Joystick configuration is complex, but flexible.  For example, you can combine
input sources by specifying different modules for each axis.  This
configuration example creates a profile called @samp{mixed} that uses the mouse
for the X-axis and firebutton, but the keys @key{A} and @key{Z} on the keyboard
for the Y-axis.  It then ensures this profile is the one used when you press
@kbd{@key{CTRL}+J}.

@example
joy mixed
  joy-axis X=mouse:
  joy-axis Y=keyboard:a,z
  joy-button mouse:

joy-virtual mixed
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Printers
@section Printers

The Dragon machines have parallel printer ports, and XRoar supports these,
sending output either to a file, or through a command pipe.  The pipe approach
allows you to apply a filter to the output, and/or send it to a real attached
printer using normal Unix commands (SUB: check whether Windows users can do
this sort of thing yet).

The CoCo and MC-10 machines have serial printer ports.  XRoar doesn't support
these directly yet, but a limited form of print redirection is implemented
using a ROM BASIC intercept.  This is enough to support BASIC commands like
LLIST, but will not cope with programs implementing their own serial routines.

@multitable @columnfractions .21 .75
@item @option{-lp-file @var{file}}
@tab Append printer output to @var{file}.
@item @option{-lp-pipe @var{command}}
@tab Pipe printer output to @var{command}.
@end multitable

Use the @option{-lp-file @var{file}} option to send printer output to a
file, or @option{-lp-pipe @var{command}} to send it through a pipe.  Pressing
@kbd{@key{CTRL}+@key{SHIFT}+P} will flush the current stream by closing it, so
if you are using a pipe, the filter will complete.  The stream will be
re-opened when any new data is sent.

Under Unix, the @command{enscript} utility is good for processing output and
sending it to a configured printer, e.g.  @option{-lp-pipe "enscript -B -N r -d
@emph{printer-name}"}.  This will send a job to your printer, using carriage
returns as line feeds (the Dragon default), each time you press
@kbd{@key{CTRL}+@key{SHIFT}+P} (or exit the emulator).

@c = === === === === === === === === === === === === === === === === === ===

@node Files
@chapter Files

@multitable @columnfractions .21 .75
@item @option{-load @var{file}}
@tab Load or attach @var{file}.  XRoar will try to do the right thing based on the file type (usually determined by file extension).
@item @option{-run @var{file}}
@tab As @option{-load}, but try to autorun the file after attaching.
@item @option{-load-tape @var{file}}
@tab Attach @var{file} as tape image for reading.  @xref{Cassettes}.
@item @option{-tape-write @var{file}}
@tab Open @var{file} for tape writing.  @xref{Cassettes}.
@item @option{-load-fd@var{X} @var{file}}
@tab Load disk image file @var{file} into drive @var{X} (0--3).  @xref{Floppy disks}.
@item @option{-load-hd@var{X} @var{file}}
@tab Use @var{file} as the hard disk image for drive @var{X} (0 or 1).  @xref{Hard disks}.
@item @option{-lp-file @var{file}}
@tab Append printer output to @var{file}.  @xref{Printers}.
@end multitable

In general, files can be attached on the command line with @option{-load
@var{file}}, or by pressing @kbd{@key{CTRL}+L}.  XRoar judges the type of
file based on its filename extension.  To attempt to intelligently autorun a
file, use @option{-run @var{file}} or press @kbd{@key{CTRL}+@key{SHIFT}+L}.
See @ref{Running programs} for the methods XRoar will use to autorun a file.

Cassettes, Floppy disks, and Hard disks are each discussed in @ref{Storage
media}.  The other kinds of file recognised by XRoar are discussed here.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node ROM cartridges
@section ROM cartridges

ROM cartridge images have a @file{.rom} or @file{.ccc} filename extension.
Because XRoar supports other types of cartridge, loading a ROM image actually
just creates a cartridge instance of type @samp{rom}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Snapshots
@section Snapshots

XRoar can save out a snapshot of the emulated machine state and read the
snapshots back in later.  To save a snapshot, press @kbd{@key{CTRL}+S}.
When using @kbd{@key{CTRL}+L} to load a file, anything ending in @file{.sna}
will be recognised as a snapshot.

Most internal state should be dumped to the snapshot.  External data like ROM
images or disk image files will be referenced by name, so when you read the
snapshot back in, they need to exist in the same place they were before.

State that is explicitly @emph{not} included in snapshots includes Becker port
DriveWire connections and GDB listen parameters.  These will use your local
settings, which default to interacting with the local host only.

Note that the snapshot format has changed since version 0.37 to accommodate the
new CoCo 3 and MC-10 support, along with other complex device state.  The old
snapshot format is deprecated, but can still be read for now.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Screenshots
@section Screenshots

XRoar can save a screenshot in PNG format.  Press
@kbd{@key{CTRL}+@kbd{SHIFT}+S} or select @clicksequence{File @click{}
Screenshot to PNG}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Binary files
@section Binary files

File types containing raw binary data to be loaded into RAM:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item .bin
@tab Binary file (DragonDOS or CoCo).  XRoar can load these directly into memory
and optionally autorun them.  Read-only
@item .hex
@tab Intel hex record.  An ASCII format that encodes binary data and
where in memory to load it.  Read-only
@end multitable


@iftex
@vskip 0pt plus 1filll
@end iftex

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Firmware ROM images
@section Firmware ROM images

Firmware ROM image files are configured as part of a machine or a cartridge.
They have a filename extension of @file{.rom} or @file{.dgn}, and can be
specified as:

@itemize @bullet
@item Complete path to a file.
@item Base filename of an image, to be discovered within a search path.
@item Base filename of an image, omitting the extension.  XRoar will search as above, appending the known ROM filename extensions.
@item An @samp{@@} character followed by the name of a ROM list.
@end itemize

A ROM list is a comma-separated list of images, each following the rules above.
ROM lists may refer to other ROM lists.  Define a ROM list with
@option{-romlist @var{name}=@var{image}[,@var{image}]@dots{}}.  View the
defined ROM lists with @option{-romlist-print}.

To make life easier, the default image for each type of machine or cartridge
usually refers to a ROM list which contains all the corresponding filenames
seen in the wild, the primary examples being:

@multitable {Tandy Super ECB (PAL CoCo 3)} {Xdragondos_compatxx} {dplus49b, sdose6, ddos10XXXXX}
@headitem Firmware ROM @tab ROM list @tab Canonical image names
@item Dragon 32 BASIC @tab @samp{@@dragon32} @tab @file{d32.rom}
@item Dragon 64 32K BASIC @tab @samp{@@dragon64} @tab @file{d64_1.rom}
@item Dragon 64 64K BASIC @tab @samp{@@dragon64_alt} @tab @file{d64_2.rom}
@item Dragon 200-E 32K BASIC @tab @samp{@@dragon200e} @tab @file{d200e_1.rom}
@item Dragon 200-E 64K BASIC @tab @samp{@@dragon200e_alt} @tab @file{d200e_2.rom}
@item Dragon 200-E Charset@tab @samp{@@dragon200e_charset} @tab @file{d200e_26.rom}
@item Tandy Colour BASIC @tab @samp{@@coco} @tab @file{bas13.rom, bas12.rom, bas11.rom, bas10.rom}
@item Tandy Extended BASIC @tab @samp{@@coco_ext} @tab @file{extbas11.rom, extbas10.rom}
@item Tandy Super ECB (CoCo 3) @tab @samp{@@coco3} @tab @file{coco3.rom}
@item Tandy Super ECB (PAL CoCo 3) @tab @samp{@@coco3p} @tab @file{coco3p.rom}
@item Tandy Microcolour BASIC @tab @samp{@@mc10} @tab @file{mc10.rom}
@item Alice Microcolour BASIC @tab @samp{@@alice} @tab @file{alice.rom}
@item DragonDOS @tab @samp{@@dragondos_compat} @tab @file{dplus49b.rom, sdose6.rom, ddos10.rom}
@item Delta System @tab @samp{@@delta} @tab @file{delta2.rom, delta.rom}
@item RS-DOS @tab @samp{@@rsdos} @tab @file{disk11.rom, disk10.rom}
@item RS-DOS with Becker port @tab @samp{@@rsdos_becker} @tab @file{hdbdw3bck.rom}
@item Orchestra 90-CC @tab @samp{orch90.rom} @tab
@end multitable

The default search path for images specified only as a base filename varies by
platform, and is detailed in @ref{Getting started}.  This path can can be
overridden with the option @option{-rompath @var{path}}, where @var{path} is a
colon-separated list of directories to search.

The @env{XROAR_ROM_PATH} environment variable can also be used to specify the
search path, but this behaviour is deprecated and may be removed in a future
version.

A CRC32 value is calculated and reported for each ROM image loaded.  XRoar uses
these CRCs to determine whether certain breakpoints can be used (e.g. for fast
tape loading).  The lists of CRCs matched can be defined in a similar way to
ROM lists using the @option{-crclist @var{list}=@var{crc}[,@var{crc}]@dots{}}
option.  Each @var{crc} is a 8-digit hex number preceded by @samp{0x}, or the
name of a nested list preceded by @samp{@@}.  Use this if you have a modified
version of a BASIC ROM that maintains compatible entry points with an original.
View the current lists with @option{-crclist-print}.

Sometimes it may be useful to force CRC matching so that breakpoints apply
(e.g. you are modifying a ROM image and don't wish to have to add its CRC to
the match list each time you modify it).  The @option{-force-crc-match} option
forces the CRCs to be as if an original ROM image were loaded.

@c = === === === === === === === === === === === === === === === === === ===

@node User interface
@chapter User interface

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node User interface selection
@section User interface selection

The user interface depends on supporting toolkit packages as described in
@ref{Building from source}.  Selection of user interface module may affect
which other types of module are available: in particular, video output is
strongly tied to the user interface.

@multitable @columnfractions .26 .70
@item @option{-ui @var{module}}
@tab Select user-interface module.  @option{-ui help} to list compiled-in modules.
@end multitable

@c

@node GTK+ user interface
@subsection GTK+ user interface

Select with @option{-ui gtk2}.

This is the most full-featured user interface.  It provides extensive dynamic
menus, and control windows for video, cassette and disk.  This is the preferred
interface under Linux.

@c

@node SDL user interface
@subsection SDL user interface

Select with @option{-ui sdl}.

Under Windows, this interface provides menus and control tools for video,
cassette and disk.

Under Mac OS X+, this interface provides basic menus.  Many operations are
usable by pressing @kbd{Command}+@var{key} as well as the usual shortcut of
@kbd{@key{CTRL}+@var{key}}.

For other builds using SDL, only the keyboard shortcuts will be available.

@c

@node NULL user interface
@subsection NULL user interface

Select with @option{-ui null}.

Show nothing!  This can actually be useful when running XRoar from a script or,
if you like, to act as a music player.  To disable audio too, run with
@option{-ao null}.  XRoar will happily emulate a machine for you with nothing
to show for it.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Video output
@section Video output

@multitable @columnfractions .26 .70
@item @option{-fs}
@tab Start full-screen.  Toggle full-screen with @kbd{@key{CTRL}+F} or @kbd{@key{F11}}.
@item @option{-fskip @var{frames}}
@tab Specify frameskip.  Default is @samp{0}.  May be helpful on slower machines.
@item @option{-vo-pixel-fmt @var{format}}
@tab Pixel format to use.  @option{-vo-pixel-fmt help} for a list.
@item @option{-gl-filter @var{filter}}
@tab Filtering method to use when scaling the screen.  One of @samp{linear}, @samp{nearest} or @samp{auto} (the default).  OpenGL output modules only.
@item @option{-vo-picture @var{picture}}
@tab Initial picture area.  @option{-vo-picture help} for a list.
@item @option{-invert-text}
@tab Start up with inverted text mode.
@item @option{-ccr @var{renderer}}
@tab Composite video cross-colour renderer.  One of @samp{none}, @samp{simple}, @samp{5bit}, @samp{partial} or @samp{simulated}.  Default is @samp{5bit}.
@item @option{-vo-brightness @var{value}}
@tab Set initial brightness (0-100).  Default is 50.
@item @option{-vo-contrast @var{value}}
@tab Set initial contrast (0-100).  Default is 50.
@item @option{-vo-colour @var{value}}
@tab Set initial colour saturation (0-100).  Default is 50.
@item @option{-vo-hue @var{value}}
@tab Set initial hue (-179 to +180).  Default is 0.
@item @option{-no-vo-colour-killer}
@tab Disable colour killer (enabled by default).
@end multitable

The pixel format, specified with @option{-vo-pixel-fmt}, defaults to RGBA with
8 bits per channel, but you may find other pixel layouts or lower bit depths
render faster on your machine.

The default picture area is 640x480 (emulated) pixels, equivalent to
@option{-vo-picture title}, which is enough to show normal VDG output with a
reasonable border.  You can change this to one of a set of defined areas:
@option{-vo-picture action} and @option{-vo-picture underscan} show more of the
picture, and may be more suitable when emulating a CoCo 3 which has some larger
video modes.  @option{-vo-picture zoomed} crops to 512x384; enough to show
standard VDG output with no borders at all.

Various levels of composite video rendering precision can be selected with
@option{-ccr}, trading off CPU with accuracy.  @option{-ccr simulated} is the
only option that tackles PAL video.  @option{-ccr partial} does pretty well for
NTSC.  @option{-ccr 5bit} and @option{-ccr simple} both use LUTs to convert
sequences of black & white into NTSC cross-colour.

When the VDG is configured to generate black & white (resolution) graphics, it
stops emitting a colourburst signal.  Colour displays may (but not always)
recognise the lack of burst and stop trying to decode colour, giving a crisper
display.  You can disable this behaviour with @option{-no-vo-colour-killer}.
NTSC machines add circuitry to reintroduce a (modified) burst to enable
cross-colour in high resolution black & white, so the colour killer being
enabled by default does not prevent colour in these modes.

A quirk of the VDG is that it can operate in-phase or 180° out of phase with
its clock signal, and how it starts up is essentially random.  This clock
signal is also used in NTSC machines to generate the colour subcarrier, which
leads to machines generating the blue and red artefact colours randomly (but
consistently, once running) swapped.  Games often prompt the user to ``Press
Enter if the screen is red'', for example.  You can press @kbd{@key{CTRL}+A},
to cycle through three modes: Off, Blue-red and Red-blue.  On the CoCo 3, a
fourth mode is included that switches to the RGB output.  In PAL machines,
"Blue-red" and "Red-blue" also select the alternate line phase switch, allowing
for correct colour in games such as @cite{Tetris} by Ola Eldøy or @cite{Donut
Dilemma} by Nick Marentes.

Inverted text mode may be toggled by pressing @kbd{@key{CTRL}+@key{SHIFT}+I}.

In the GTK+ and Windows interfaces, @clicksequence{View @click{} TV Controls}
opens a control window allowing you to dynamically modify various display
options.  Pressing @kbd{@key{CTRL}+@key{SHIFT}+V} will also open this
window.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Audio output
@section Audio output

@multitable @columnfractions .28 .68
@item @option{-ao @var{module}}
@tab Select audio output module.  @option{-ao help} for a list.
@item @option{-ao-device @var{device}}
@tab Module-specific device specifier.  e.g. @file{/dev/dsp} for OSS.
@item @option{-ao-format @var{format}}
@tab Specify audio sample format.  @option{-ao-format help} for a list.
@item @option{-ao-rate @var{hz}}
@tab Specify audio frame rate, where supported.  The default is taken from the operating system if possible, otherwise it will usually be @samp{48000}.
@item @option{-ao-channels @var{n}}
@tab Specify number of channels (1 or 2).  Default is usually @samp{2}.
@item @option{-ao-fragments @var{n}}
@tab Specify number of audio fragments.
@item @option{-ao-fragment-ms @var{ms}}
@tab Specify audio fragment size in milliseconds.
@item @option{-ao-fragment-frames @var{n}}
@tab Specify audio buffer size in frames.
@item @option{-ao-buffer-ms @var{ms}}
@tab Specify total audio buffer size in milliseconds.
@item @option{-ao-buffer-frames @var{n}}
@tab Specify total audio buffer size in frames.
@item @option{-ao-gain @var{db}}
@tab Specify audio gain in dB relative to 0 dBFS.  Only negative values really make sense here.  Default: @samp{-3.0}
@item @option{-ao-volume @var{volume}}
@tab Older way to specify volume.  Simple linear scaling, using values 0--100.
@end multitable

Audio latency is a concern for emulators, so XRoar allows the buffering
characteristics to be configured with the fragment and buffer options above.
Not all audio modules support all options, but setting the total audio buffer
size will usually have an effect.  Bear in mind that any figures reported by
XRoar reflect what it was able to request, and won't include any extra
buffering introduced by the underlying sound system.

When the Orchestra 90-CC cartridge is attached, its stereo output needs to be
mixed with the Dragon's normal audio.  To allow a small amount of headroom for
this, the default gain is set to @samp{-3.0} (dB relative to full scale), but
be aware that it would still be possible for this to clip depending on what's
happening on the internal sound bus.  A setting of @option{-ao-gain -9.0} would
give plenty of headroom (at the expense of a quieter overall sound).

@c = === === === === === === === === === === === === === === === === === ===

@node Debugging
@chapter Debugging

@multitable @columnfractions .26 .70
@item @option{-gdb}
@tab Enable GDB target.
@item @option{-gdb-ip @var{address}}
@tab Address of interface for GDB target.  Default: @samp{127.0.0.1}
@item @option{-gdb-port @var{port}}
@tab Port for GDB target to listen on.  Default: @samp{65520}

@item @option{-trace}
@tab Start with trace mode on.  @kbd{@key{CTRL}+V} toggles.

@item @option{-debug-fdc @var{flags}}@*@option{-debug-file @var{flags}}@*@option{-debug-gdb @var{flags}}@*@option{-debug-ui @var{flags}}
@tab Various per-subsystem debugging flags.  The special value @samp{-1} enables all flags for the subsystem.

@item @option{-v @var{level}@*-verbose @var{level}}
@tab General debug verbosity (0--3).  Default: @samp{1}
@item @option{-q}@*@option{-quiet}
@tab Equivalent to @option{-verbose 0}.

@item @option{-timeout @var{n}}
@tab Exit emulator after running for @var{n} seconds.
@item @option{-timeout-motoroff @var{n}}
@tab Exit emulator @var{n} seconds after cassette motor switches off, or end of tape reached.
@item @option{-snap-motoroff @var{file}}
@tab Write a snapshot to @var{file} each time the cassette motor switches off, or end of tape reached.
@end multitable

XRoar can act as a remote target for GDB using a network socket.  When GDB
connects, emulation is stopped.  GDB can then inspect memory, instruct the
target to set breakpoints and watchpoints (read, write and access), single step
or continue execution.  A version of GDB patched to specifically support 6809
targets can also perform disassembly and inspect registers.  For more
information on how to use GDB, see the
@myuref{http://www.gnu.org/software/gdb/documentation/, GDB Documentation}.

Enable the GDB remote target with @option{-gdb}.  The default IP and port for
the target are @samp{127.0.0.1} and @samp{65520}.  These can be overridden with
the @option{-gdb-ip} and @option{-gdb-port} options.

XRoar also supports a simpler @emph{trace mode}, where it will dump a disassembly
of every instruction it executes to the console.  Toggle trace mode on or off
with @kbd{@key{CTRL}+V}.  Trace mode can be enabled from startup with the
@option{-trace} option.  Very useful when piped through @command{less}, as you
can use simple text searches.

Note that GDB support is not currently implemented for the 6803 used by the
MC-10 and Alice, but trace mode is.

User-interface debugging flag can be enabled with @option{-debug-ui
@var{value}}, where only one value is currently supported:

@multitable @columnfractions .15 .81
@item 0x0001
@tab Keyboard event debugging.
@end multitable

Hex & binary file debugging can be enabled with @option{-debug-file
@var{value}}, where the value is a bitwise ORing of the following:

@multitable @columnfractions .15 .81
@item 0x0001
@tab Print summary information such as load or exec addresses.
@item 0x0002
@tab Hex dump of all data read into memory.
@item 0x0004
@tab Print filename block metadata when autorunning a tape.
@end multitable

Floppy controller debugging can be enabled with @option{-debug-fdc @var{value}},
where the value is a bitwise ORing of the following:

@multitable @columnfractions .15 .81
@item 0x0001
@tab Show FDC commands.
@item 0x0002
@tab Show all FDC states.
@item 0x0004
@tab Hex dump of read/write sector data.
@item 0x0008
@tab Hex dump of Becker port conversation data.
@item 0x0010
@tab General FDC event debugging.
@end multitable

The GDB stub can also emit debug information about its own operation with
@option{-debug-gdb @var{value}}, where value is a bitwise ORing of:

@multitable @columnfractions .15 .81
@item 0x0001
@tab Connection open and close.
@item 0x0002
@tab Show packet data.
@item 0x0004
@tab Checksum reporting.
@item 0x0008
@tab Report on general queries.
@end multitable

The special value argument of -1 parses as @emph{all bits set}, and so enables
all corresponding debug options.

XRoar prints various other informational messages to standard output by
default, including when the state of certain toggles is modified.  Verbosity
can be changed with the @option{-verbose @var{level}} option.  @option{-quiet}
is equivalent to @option{-verbose 0}.  Levels are:

@multitable @columnfractions .15 .81
@item 0
@tab Quiet.  Only warnings and errors printed.
@item 1
@tab Print startup diagnostics and emulator state changes (default).
@item 2
@tab Report some emulated machine state changes.
@item 3
@tab Miscellaneous internal debugging.
@end multitable

XRoar can be told to exit after a number of (emulated) seconds with the
@option{-timeout @var{seconds}} option.

XRoar can quit a number of seconds after the cassette motor is switched off
with the @option{-timeout-motoroff @var{seconds}} option.  This is useful in
the case of automatic tape rewriting.  A value of 1 is usually sufficient to
account for the brief motor click that occurs after header blocks and during
gapped loading.

Similarly, a snapshot can be automatically written after loading with the
@option{-snap-motoroff @var{file}} option.   The file is overwritten each time
the motor transitions to off.  This can be used to help analyse the machine
state immediately after loading, before any autorun code has taken effect
(specifying a @file{.ram} snapshot may be particularly useful here for
analysis).

To see debug output from the pre-built Windows binary, run it with @option{-C}
as the first option to allocate a console.

@c = === === === === === === === === === === === === === === === === === ===

@node Acknowledgements
@chapter Acknowledgements

Early on, I made reference to the MAME 6809 core for clues on how the overflow
bit in the condition code register was handled.

Darren Atkinson's @cite{Motorola 6809 and Hitachi 6309 Programmers Reference}
has been very useful for 6309 support and fleshing out some of the illegal
instructions on the 6809.

Alan Cox contributed the IDE code.

Tormod Volden contributed support for his NX32 and MOOH devices (including
general SPI and SD image support).

Greg Dionne and Ron Klein have been very helpful with information and testing
of MC-10 related behaviour.

Various other people have also provided feedback or test cases that have helped
nail down bugs; read the ChangeLog for details.

And thanks to all the people on the
@myuref{https://archive.worldofdragon.org/phpBB3/, Dragon Archive Forums},
IRC and CoCo Discord that have provided helpful feedback and insight.

Various @myuref{https://www.bbc.co.uk/rd/publications, BBC R&D White Papers}
and @cite{Video Demystified} by Keith Jack were good references while working
on composite video simulation.


@c = === === === === === === === === === === === === === === === === === ===

@node Installation
@appendix Installation

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Binary packages
@section Binary packages

Pre-built binary packages are available from the
@myuref{https://www.6809.org.uk/xroar/, XRoar home page}.  If one is not
available for your architecture, you will need to build from source.  XRoar
should build and run on any POSIX-like system for which SDL version 2 is
available.

You will also need BASIC ROM images---binary dumps of the firmware from an
original machine.  The originals were part-written by Microsoft, so they are
not distributed in the XRoar packages.

@c

@node Mac OS X+ binary package
@subsection Mac OS X+ binary package

Download and unzip the appropriate @file{.zip} distribution for your system.
Drag the application icon to @file{/Applications/}.

For troubleshooting or testing options, it's often a good idea to run from the
command line, but application packages don't make that trivial.  A symbolic
link to somewhere in your @env{PATH} is all that's required.  e.g.:

@example
$ sudo ln -s /Applications/XRoar.app/Contents/MacOS/xroar \
        /usr/local/bin/xroar
@end example

After this, you can start the emulator by simply typing @command{xroar}
followed by any command line options.

ROM images should be placed in a directory you create under your @env{HOME}
named @file{~/Library/XRoar/roms/} (not the system directory,
@file{/Library/}).  Name any configuration file you create
@file{~/Library/XRoar/xroar.conf}.

The Mac OS X+ build provides a menu for access to certain features, and often
accepts the more familiar @kbd{@key{Command}+@var{key}} in place of the
@kbd{@key{CTRL}+@var{key}} shortcuts listed in this manual.  It does not
provide control dialog boxes.

@c

@node Windows binary package
@subsection Windows binary package

Download and unzip the appropriate @file{.zip} distribution for your system.

The easiest way forward is to simply put ROM images into the directory created
when you unzip the distribution, and then run the @file{.exe} straight from
there, or see @ref{Prerequisites} for information on keeping them in a location
that should work after installing new versions.

You can also put any configuration file (@file{xroar.conf}) in the same
directory.  Again, this can also be placed in a common location.  @xref{The
configuration file}.

Note when troubleshooting that the logging from the Windows binary is probably
only going to be visible if you run it with the @option{-C} option (must be the
first option) to allocate a console.

The Windows build provides a reasonably full user-interface, including menus
and control dialogs.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Building from source
@section Building from source

@c

@node Dependencies
@subsection Dependencies

If there is no binary package for your system, you will have to build from
source.  XRoar can use various backend toolkits, and you will need to ensure
you have their development files installed.  If you're using Debian, this can
(at the time of writing) be achieved with the following simple command:

@example
$ sudo apt install build-essential libsndfile1-dev libgtk2.0-dev \
        libgtkglext1-dev libasound2-dev libpng-dev
@end example

Under Mac OS X+, first be sure to install Apple's
@myuref{https://developer.apple.com/xcode/, Xcode} package.  The easiest way to
then ensure you have XRoar's dependencies available is to use a system like
@myuref{https://brew.sh/, Homebrew} or @myuref{http://www.macports.org/,
MacPorts}.  For Homebrew, the following command will install the required
dependencies:

@example
$ brew install libsndfile sdl2
@end example

Otherwise, you'll have to do a bit of platform-specific research to ensure you
have all the dependencies for a full build:

@myuref{http://www.gtk.org/, GTK+}, the GIMP toolkit, provides the most
full-featured user interface.  It is only usable as such if you also have
@myuref{http://projects.gnome.org/gtkglext/, GtkGlExt}, an OpenGL extension
used to provide video output.  Otherwise, it can provide a file requester for
use by other user interfaces.  Version 2 only.

@myuref{http://www.libsdl.org/, SDL}, Simple Directmedia Layer, provides a
slightly more basic user experience.  Menus are added using native code under
Mac OS X+ and Windows; any other target using SDL will support only keyboard
shortcuts.  Unless you are building for Linux, SDL is required to use
joysticks.  Version 2 required.

POSIX Regular Expressions are used in option parsing, so
@myuref{https://laurikari.net/tre/about/, TRE} is required on non-POSIX
platforms (e.g. Windows).

Other supported audio APIs: OSS, ALSA, PulseAudio, CoreAudio.  Some other
options are still in the code base, but have not been tested in a while.

@myuref{http://www.mega-nerd.com/libsndfile/, libsndfile} is recommended to
enable support for using audio files as cassette images.

@c

@node Compilation
@subsection Compilation

Once you have the dependencies, building XRoar follows a familiar
procedure:@footnote{If you have cloned the git repository, you will need GNU
Build System packages installed: @samp{autoconf}, etc.  Running
@command{./autogen.sh} should then generate the configure script, which you can
run as normal.}

@example
$ gzip -dc xroar-@value{VERSION}.tar.gz | tar xvf -
$ cd xroar-@value{VERSION}
$ ./configure
$ make
$ sudo make install
@end example

The @command{configure} script has a lot of options guiding what it tests for,
specifying cross-compilation, changing the install path, etc.  List them all
with the @option{--help} option.

By default, @command{configure} will set up an install @emph{prefix} of
@file{/usr/local}, but this can be changed by using the
@option{--prefix=@var{path}} option.

Once built, run @command{make install} as root (or use @command{sudo}, as in
the example above) to install the binary and info documentation on your system.
The executable is called @file{xroar}.  ROM images should be placed either in
your home directory as @file{~/.xroar/roms/}, or under the installation
@emph{prefix} as @file{@emph{prefix}/share/xroar/roms/}.  Any configuration
file should be created as @file{~/.xroar/xroar.conf}.

XRoar can be built on one platform to run on another.  The Windows binary
package is built like this.  To specify a cross-compile, use the
@option{--host=@var{host}} argument to @command{configure}.  For example, to
build for Windows, you might use @samp{./configure --host=i686-w64-mingw32}.
Getting everything @emph{just so} for a cross-build can be a tricky procedure, and
the details are beyond the scope of this manual.

XRoar can be built to a WebAssembly target using
@myuref{https://emscripten.org/, Emscripten}.  With the SDK installed, run
@command{emconfigure ./configure --enable-wasm} to set up the build
environment.  Build with @command{emmake make}.  HTML/JavaScript and CSS
examples for interfacing to the output are included in the @file{wasm/}
subdirectory.

@c = === === === === === === === === === === === === === === === === === ===

@node Keyboard shortcuts
@appendix Keyboard shortcuts

A summary of commonly available keyboard shortcuts.

@multitable {XXXXXXXXXXX} {XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}
@item @kbd{@key{CTRL}+[1-4]} @tab Insert disk into drive 1--4.
@item @kbd{@key{CTRL}+@key{SHIFT}+[1-4]} @tab Create new disk in drive 1--4.
@item @kbd{@key{CTRL}+[5-8]} @tab Toggle write enable on disk in drive 1--4.
@item @kbd{@key{CTRL}+@key{SHIFT}+[5-8]} @tab Toggle write back on disk in drive 1--4.
@item @kbd{@key{CTRL}+A} @tab Cycle through cross-colour modes (and RGB on CoCo 3).
@item @kbd{@key{CTRL}+D} @tab Open disk control tool (GTK+ & Windows only).
@item @kbd{@key{CTRL}+@key{SHIFT}+D} @tab Flush disk images.
@item @kbd{@key{CTRL}+E} @tab Toggle cartridge on/off - reset to take effect.
@item @kbd{@key{CTRL}+F}@*@ @ @ or @kbd{@key{F11}} @tab Toggle full screen mode.
@item @kbd{@key{CTRL}+@key{SHIFT}+H}@*@ @ @ or @kbd{@key{PAUSE}} @tab Halt the CPU (not on the MC-10).
@item @kbd{@key{CTRL}+@key{SHIFT}+I} @tab Toggle text mode inverse video.
@item @kbd{@key{CTRL}+J} @tab Cycle through joystick emulation modes (None, Right, Left).
@item @kbd{@key{CTRL}+@key{SHIFT}+J} @tab Swap left and right joysticks.
@item @kbd{@key{CTRL}+K} @tab Toggle Dragon/CoCo keyboard layout (not on the MC-10).
@item @kbd{@key{CTRL}+L} @tab Load a file.
@item @kbd{@key{CTRL}+@key{SHIFT}+L} @tab Load and attempt to autorun a file.
@item @kbd{@key{CTRL}+M} @tab Toggle menubar.
@item @kbd{@key{CTRL}+@key{SHIFT}+P} @tab Flush printer output.
@item @kbd{@key{CTRL}+Q} @tab Quit emulator.
@item @kbd{@key{CTRL}+R} @tab Soft reset emulated machine.
@item @kbd{@key{CTRL}+@key{SHIFT}+R} @tab Hard reset emulated machine.
@item @kbd{@key{CTRL}+S} @tab Save a snapshot.
@item @kbd{@key{CTRL}+@key{SHIFT}+S} @tab Write screenshot as PNG.
@item @kbd{@key{CTRL}+T} @tab Open the tape control tool (GTK+ & Windows only).
@item @kbd{@key{CTRL}+V} @tab Toggle trace mode.
@item @kbd{@key{CTRL}+@key{SHIFT}+V} @tab Open TV controls window (GTK+ & Windows only).
@item @kbd{@key{CTRL}+W} @tab Attach a virtual cassette file for writing.
@item @kbd{@key{CTRL}+Z} @tab Enable keyboard translation mode.
@item @kbd{@key{F12}} @tab Run at maximum speed while held.
@item @kbd{@key{SHIFT}+@key{F12}} @tab Maximum speed toggle.
@end multitable

@c = === === === === === === === === === === === === === === === === === ===

@node File formats
@appendix File formats

XRoar recognises most file types by their file extension.

@multitable @columnfractions .20 .75

@headitem Extension @tab Description

@item @file{.cas, .c10}

@tab Compact cassette image.  CUE data can optionally mark up silence and the
wavelength to use for each bit.

@item @file{.k7}

@tab Another less popular compact cassette image format.  Read-only.

@item @file{.bas, .asc}

@tab ASCII BASIC files.  XRoar will wrap the ASCII text in the appropriate file
structure to present to the emulated machine as saved ASCII BASIC.  On the
MC-10, these will be ``quick-typed'' instead, as these machines do not support
ASCII BASIC files on tape.  Read-only.

@item @file{.wav}

@tab Standard audio data file can be used as a cassette image.

@item @file{.dmk}

@tab Disk image file in a format defined by David Keil.  These images store a lot of
information about the structure of a disk and support both single and double
density data.

@item @file{.jvc, .os9, .dsk}

@tab Disk image file in a basic sector-by-sector format with optional
header information.

@item @file{.vdk}

@tab Another disk image file format, used by PC-Dragon.

@item @file{.sna}

@tab XRoar-specific snapshots preserve machine state.  Old v1 snapshots can
still be read, but writing a snapshot uses the new v2 format.

@item @file{.ram}

@tab When a @file{.ram} extension is given while writing a snapshot, a simple
RAM dump is generated instead.  Write-only.

@item @file{.bin, .dgn, .cco}

@tab Binary file in DragonDOS or RS-DOS format (autodetected).  Read-only.
,,  
@item @file{.hex}

@tab Intel hex record.  An ASCII format that encodes binary data and where in
memory to load it.  Read-only.

@item @file{.rom, .ccc}

@tab ROM image file.  Simple binary dump of a ROM IC.  Machine firmware images
and ROM cartridge images are in this format.  Read-only.

@item @file{.ide}

@tab HD image file assumed to be 512 bytes per sector with IDE ``magic'' and
IDENTIFY DEVICE metadata in the first 1024 bytes.

@item @file{.img}

@tab HD image file assumed to be 512 bytes per sector with no header.

@item @file{.vhd}

@tab HD image file assumed to be 256 bytes per sector with no header.

@end multitable

@c = === === === === === === === === === === === === === === === === === ===

@node Option list
@appendix Option list

Options may be specified in the configuration file, @file{xroar.conf}, or on
the command line.  The leading dash (@samp{-}) is not required in the
configuration file.

@multitable @columnfractions .25 .71
@headitem Startup options
@item @option{-C}
@tab Allocate a console window to see debug messages (Windows-only).
@item @option{-c @var{file}}
@tab Specify a different configuration file.
@item @option{-no-c}
@tab Don't read the configuration file.
@item @option{-no-builtin}
@tab Disable built-in configuration.  Unless you also define a machine yourself, XRoar will abort.
@end multitable

@c

@multitable @columnfractions .30 .66
@headitem Machines @tab @xref{Machines}.
@item @option{-default-machine @var{name}}
@tab Default machine profile to select on startup.
@item @option{-m @var{name}},@*@option{-machine @var{name}}
@tab Create or modify named machine profile.  The remaining options configure the profile.  @option{-machine help} lists currently defined profiles.
@item @ @ @ @option{-machine-desc @var{text}}
@tab Description shown in @option{-machine help} and menu options.
@item @ @ @ @option{-machine-arch @var{arch}}
@tab Base machine architecture.  See @ref{Machines} for a list.  @samp{dragon32, dragon64, coco, coco3} or @samp{mc10}.
@item @ @ @ @option{-machine-keyboard @var{type}}
@tab Override the type of keyboard attached to machine.  @samp{dragon, dragon200e, coco} or @samp{coco3}.
@item @ @ @ @option{-machine-cpu @var{cpu}}
@tab Fitted CPU.  One of @samp{6809} or @samp{6309}.  Not applicable to the MC-10.
@item @ @ @ @option{-bas @var{rom}}
@tab ROM image for Colour BASIC (CoCo) or Microcolour BASIC (MC-10).
@item @ @ @ @option{-extbas @var{rom}}
@tab ROM image for Extended BASIC (Super Extended BASIC on the CoCo@w{ }3).
@item @ @ @ @option{-altbas @var{rom}}
@tab ROM image for 64K-mode Extended BASIC (Dragon 64, Dragon 200-E).
@item @ @ @ @option{-no-bas},@*@ @ @ @option{-no-extbas},@*@ @ @ @option{-no-altbas}
@tab Indicate the corresponding ROM is not fitted in this machine.
@item @ @ @ @option{-ext-charset @var{rom}}
@tab ROM image to use for external character generator.
@item @ @ @ @option{-tv-type @var{type}}
@tab One of @samp{pal}, @samp{ntsc} or @samp{pal-m}.
@item @ @ @ @option{-tv-input @var{input}}
@tab One of @samp{cmp} (composite video, no cross-colour), @samp{cmp-br} (composite video, blue-red cross-colour), @samp{cmp-rb} (composite video, red-blue cross-colour) or @samp{rgb} (RGB video, CoCo 3 only).
@item @ @ @ @option{-vdg-type @var{type}}
@tab Indicate the VDG variant fitted.  One of @samp{6847} or @samp{6847t1}.
@item @ @ @ @option{-ram @var{kbytes}}
@tab Amount of RAM fitted in kilobytes.  Valid sizes are 4K, 8K, 16K, 32K or 64K for Dragon and Tandy CoCo 1/2; 128K, 512K, 1024K or 2048K for the Tandy CoCo 3; 2K, 4K or 20K for the Tandy MC-10.
@item @ @ @ @option{-machine-cart @var{name}}
@tab Default cartridge to attach.
@item @ @ @ @option{-no-machine-cart}
@tab Indicate that XRoar is not to automatically attempt to attach a DOS cartridge
to this machine (the default is to try).
@item @ @ @ @option{-machine-opt @var{string}}
@tab Set machine arch-specific option.
@end multitable

@c

@multitable @columnfractions .27 .69
@headitem Cartridges @tab @xref{Cartridges}.
@item @option{-cart @var{name}}
@tab Create or modify named cartridge profile.  @option{-cart help} lists currently defined profiles.  The remaining options configure the profile.
@item @ @ @ @option{-cart-desc @var{text}}
@tab Cartridge description shown in @option{-cart help} and menu options.
@item @ @ @ @option{-cart-arch @var{arch}}
@tab Cartridge architecture.  See @ref{Cartridge types} for a list.
@item @ @ @ @option{-cart-rom @var{file}}
@tab The ROM image specified will be mapped from $C000.
@item @ @ @ @option{-cart-rom2 @var{file}}
@tab The ROM image specified will be mapped from $E000.
@item @ @ @ @option{-cart-becker}
@tab Enable Becker port where supported.
@item @ @ @ @option{-cart-autorun}
@tab Auto-start cartridge using FIRQ.
@item @ @ @ @option{-cart-opt @var{string}}
@tab Set cartridge type-specific option.
@end multitable

@c

@multitable @columnfractions .33 .63
@headitem Multi-Pak Interface @tab @xref{Multi-Pak Interface}.
@item @option{-mpi-slot @var{slot}}
@tab Initially select slot (0--3).
@item @option{-mpi-load-cart [@var{slot}]=@var{name}}
@tab Insert cartridge into next or numbered slot.
@end multitable

@c

@multitable @columnfractions .24 .72
@headitem Becker port @tab @xref{Becker port}.
@item @option{-becker}
@tab Prefer becker-enabled DOS cartridge when picked automatically.
@item @option{-becker-ip @var{address}}
@tab Address or hostname of DriveWire server.  Default: @samp{127.0.0.1}
@item @option{-becker-port @var{port}}
@tab Port of DriveWire server.  Default: @samp{65504}
@end multitable

@c

@multitable @columnfractions .32 .64
@headitem Cassettes @tab @xref{Cassettes}.
@item @option{-load-tape @var{file}}
@tab Attach @var{file} as tape image for reading.
@item @option{-tape-write @var{file}}
@tab Open @var{file} for tape writing.
@item @option{-tape-pan @var{position}}
@tab Pan stereo input.  Floating point number from @samp{0.0} (full left) to @samp{1.0} (full right).  The default of @samp{0.5} mixes the two channels equally.
@item @option{-tape-hysteresis @var{pc}}
@tab Read hysteresis as percentage of full scale (default is 1%).
@item @option{-no-tape-fast}
@tab Disable fast tape loading.  The default is enabled, which uses ROM intercepts to speed up loading.
@item @option{-no-tape-pad-auto}
@tab Disable automatic padding of short leaders in CAS files (see below).
@item @option{-tape-ao-rate @var{hz}}
@tab Set tape writing frame rate to @var{hz} (affects audio file output, e.g.  WAV).  Default: @samp{9600}Hz.
@item @option{-tape-rewrite}
@tab Enable tape rewriting (see below).
@item @option{-tape-rewrite-gap-ms @var{ms}}
@tab Gap length in milliseconds to write in rewrite mode (1-5000ms, default 500ms).
@item @option{-tape-rewrite-leader @var{n}}
@tab Length of leaders in bytes to write in rewrite mode (1-2048 bytes, default 256).
@item @option{-snap-motoroff @var{file}}
@tab Write a snapshot to @var{file} each time the cassette motor is switched off.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem Floppy disks @tab @xref{Floppy disks}.
@item @option{-load-fd@var{X} @var{file}}
@tab Load disk image file @var{file} into drive @var{X} (0--3).
@item @option{-no-disk-write-back}
@tab Don't default to enabling write-back for disk images.
@item @option{-no-disk-auto-os9}
@tab Don't try to detect headerless OS-9 JVC disk images.
@item @option{-no-disk-auto-sd}
@tab Don't assume single density for 10 sector-per-track disks.
@end multitable

@c

@multitable @columnfractions .21 .75
@headitem Hard disks @tab @xref{Hard disks}.
@item @option{-load-hd@var{X} @var{file}}
@tab Use @var{file} as the hard disk image for drive @var{X} (0 or 1).
@end multitable

@c

@multitable @columnfractions .33 .63
@headitem Keyboard @tab @xref{Keyboard}.
@item @option{-keymap @var{code}}
@tab Specify host keyboard layout.  @option{-keymap help} for a list.  Default: @samp{uk}
@item @option{-kbd-bind @var{hkey}=[pre:]@var{dkey}}
@tab Bind host key @var{hkey} to emulated key @var{dkey}.
@item @option{-kbd-translate}
@tab Start up in translated keyboard mode.
@item @option{-type @var{string}}
@tab Intercept ROM calls to type @var{string} into BASIC on startup.
@end multitable

@c

@multitable @columnfractions .37 .59
@headitem Joysticks @tab @xref{Joysticks}.
@item @option{-joy @var{name}}
@tab Create or modify named joystick profile.  @option{-joy help} lists currently defined profiles.
@item @ @ @ @option{-joy-desc @var{text}}
@tab Joysticks description shown in @option{-joy help}.  @c and menu options.
@item @ @ @ @option{-joy-axis @var{axis}=@var{input}:[@var{args}]}
@tab Configure joystick axis.  @option{-joy-axis help} to list physical joysticks.
@item @ @ @ @option{-joy-button @var{btn}=@var{input}:[@var{args}]}
@tab Configure joystick button.  @option{-joy-button help} to list physical joysticks.
@item @option{-joy-right @var{name}}
@tab Map right joystick.
@item @option{-joy-left @var{name}}
@tab Map left joystick.
@item @option{-joy-virtual @var{name}}
@tab Specify the @emph{virtual} joystick to cycle.  Default: @samp{kjoy0}
@end multitable

@c

@multitable @columnfractions .21 .75
@headitem Printers @tab @xref{Printers}.
@item @option{-lp-file @var{file}}
@tab Append printer output to @var{file}.
@item @option{-lp-pipe @var{command}}
@tab Pipe printer output to @var{command}.
@end multitable

@c

@multitable @columnfractions .21 .75
@headitem Files @tab @xref{Files}.
@item @option{-load @var{file}}
@tab Load or attach @var{file}.  XRoar will try to do the right thing based on the file type (usually determined by file extension).
@item @option{-run @var{file}}
@tab As @option{-load}, but try to autorun the file after attaching.
@item @option{-load-tape @var{file}}
@tab Attach @var{file} as tape image for reading.  @xref{Cassettes}.
@item @option{-tape-write @var{file}}
@tab Open @var{file} for tape writing.  @xref{Cassettes}.
@item @option{-load-fd@var{X} @var{file}}
@tab Load disk image file @var{file} into drive @var{X} (0--3).  @xref{Floppy disks}.
@item @option{-load-hd@var{X} @var{file}}
@tab Use @var{file} as the hard disk image for drive @var{X} (0 or 1).  @xref{Hard disks}.
@item @option{-lp-file @var{file}}
@tab Append printer output to @var{file}.  @xref{Printers}.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem Firmware ROM images @tab @xref{Firmware ROM images}.
@item @option{-rompath @var{path}}
@tab Set ROM search path.  A colon-separated list of directories.
@item @option{-romlist @var{name}=@var{list}}
@tab Define a ROM list.
@item @option{-romlist-print}
@tab Print defined ROM lists and exit.
@item @option{-crclist @var{name}=@var{list}}
@tab Define a CRC list.
@item @option{-crclist-print}
@tab Print defined CRC lists and exit.
@item @option{-force-crc-match}
@tab Force per-architecture CRC matching.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem User interface @tab @xref{User interface selection}.
@item @option{-ui @var{module}}
@tab Select user-interface module.  @option{-ui help} to list compiled-in modules.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem Video output @tab @xref{Video output}.
@item @option{-fs}
@tab Start full-screen.  Toggle full-screen with @kbd{@key{CTRL}+F} or @kbd{@key{F11}}.
@item @option{-fskip @var{frames}}
@tab Specify frameskip.  Default is @samp{0}.  May be helpful on slower machines.
@item @option{-vo-pixel-fmt @var{format}}
@tab Pixel format to use.  @option{-vo-pixel-fmt help} for a list.
@item @option{-gl-filter @var{filter}}
@tab Filtering method to use when scaling the screen.  One of @samp{linear}, @samp{nearest} or @samp{auto} (the default).  OpenGL output modules only.
@item @option{-vo-picture @var{picture}}
@tab Initial picture area.  @option{-vo-picture help} for a list.
@item @option{-invert-text}
@tab Start up with inverted text mode.
@item @option{-ccr @var{renderer}}
@tab Composite video cross-colour renderer.  One of @samp{none}, @samp{simple}, @samp{5bit}, @samp{partial} or @samp{simulated}.  Default is @samp{5bit}.
@item @option{-vo-brightness @var{value}}
@tab Set initial brightness (0-100).  Default is 50.
@item @option{-vo-contrast @var{value}}
@tab Set initial contrast (0-100).  Default is 50.
@item @option{-vo-colour @var{value}}
@tab Set initial colour saturation (0-100).  Default is 50.
@item @option{-vo-hue @var{value}}
@tab Set initial hue (-179 to +180).  Default is 0.
@item @option{-no-vo-colour-killer}
@tab Disable colour killer (enabled by default).
@end multitable

@c

@multitable @columnfractions .28 .68
@headitem Audio output @tab @xref{Audio output}.
@item @option{-ao @var{module}}
@tab Select audio output module.  @option{-ao help} for a list.
@item @option{-ao-device @var{device}}
@tab Module-specific device specifier.  e.g. @file{/dev/dsp} for OSS.
@item @option{-ao-format @var{format}}
@tab Specify audio sample format.  @option{-ao-format help} for a list.
@item @option{-ao-rate @var{hz}}
@tab Specify audio frame rate, where supported.  The default is taken from the operating system if possible, otherwise it will usually be @samp{48000}.
@item @option{-ao-channels @var{n}}
@tab Specify number of channels (1 or 2).  Default is usually @samp{2}.
@item @option{-ao-fragments @var{n}}
@tab Specify number of audio fragments.
@item @option{-ao-fragment-ms @var{ms}}
@tab Specify audio fragment size in milliseconds.
@item @option{-ao-fragment-frames @var{n}}
@tab Specify audio buffer size in frames.
@item @option{-ao-buffer-ms @var{ms}}
@tab Specify total audio buffer size in milliseconds.
@item @option{-ao-buffer-frames @var{n}}
@tab Specify total audio buffer size in frames.
@item @option{-ao-gain @var{db}}
@tab Specify audio gain in dB relative to 0 dBFS.  Only negative values really make sense here.  Default: @samp{-3.0}
@item @option{-ao-volume @var{volume}}
@tab Older way to specify volume.  Simple linear scaling, using values 0--100.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem Debugging @tab @xref{Debugging}.
@item @option{-gdb}
@tab Enable GDB target.
@item @option{-gdb-ip @var{address}}
@tab Address of interface for GDB target.  Default: @samp{127.0.0.1}
@item @option{-gdb-port @var{port}}
@tab Port for GDB target to listen on.  Default: @samp{65520}

@item @option{-trace}
@tab Start with trace mode on.  @kbd{@key{CTRL}+V} toggles.

@item @option{-debug-fdc @var{flags}}@*@option{-debug-file @var{flags}}@*@option{-debug-gdb @var{flags}}@*@option{-debug-ui @var{flags}}
@tab Various per-subsystem debugging flags.  The special value @samp{-1} enables all flags for the subsystem.

@item @option{-v @var{level}@*-verbose @var{level}}
@tab General debug verbosity (0--3).  Default: @samp{1}
@item @option{-q}@*@option{-quiet}
@tab Equivalent to @option{-verbose 0}.

@item @option{-timeout @var{n}}
@tab Exit emulator after running for @var{n} seconds.
@item @option{-timeout-motoroff @var{n}}
@tab Exit emulator @var{n} seconds after cassette motor switches off, or end of tape reached.
@item @option{-snap-motoroff @var{file}}
@tab Write a snapshot to @var{file} each time the cassette motor switches off, or end of tape reached.
@end multitable

@c

@multitable @columnfractions .26 .70
@headitem Help options
@item @option{-config-print}
@tab Print configuration to standard out.
@item @option{-config-print-all}
@tab Print configuration to standard out, including defaults.
@item @option{-h, --help}
@tab Print help text and exit.
@item @option{-V, --version}
@tab Print version information and exit.
@end multitable

In addition, various other options accept @samp{help} as an argument to print a
list of values they accept.

@c = === === === === === === === === === === === === === === === === === ===

@bye
